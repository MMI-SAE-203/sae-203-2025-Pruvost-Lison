---
// Carousel.astro
const { id, title } = Astro.props;
---

<div class="carousel-container" x-data="{ 
  current: 0,
  slidesToShow: 1,
  itemCount: 0,
  autoplayInterval: null
}" 
x-init="
  // Compter le nombre total d'éléments
  itemCount = $refs.track.children.length;
  
  // Déterminer combien de slides afficher selon la largeur de l'écran
  slidesToShow = window.innerWidth < 640 ? 1 : window.innerWidth < 768 ? 2 : window.innerWidth < 1024 ? 3 : 4;
  
  // Recalculer lors du redimensionnement de la fenêtre
  window.addEventListener('resize', () => {
    slidesToShow = window.innerWidth < 640 ? 1 : window.innerWidth < 768 ? 2 : window.innerWidth < 1024 ? 3 : 4;
  });
  
  // Log pour déboguer
  console.log(`Carousel ${id}: ${itemCount} items, ${slidesToShow} slides to show`);
">
  {title && <h2 class="carousel-title text-2xl font-bold mb-6 text-center">{title}</h2>}
  
  <div class="carousel relative" id={id}>
    <!-- Bouton Précédent -->
    <button 
      class="carousel-button prev absolute top-1/2 -translate-y-1/2 left-0 z-10 bg-white rounded-full w-10 h-10 flex items-center justify-center shadow-md" 
      @click="current = (current - 1 + itemCount) % itemCount"
      aria-label="Précédent"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    
    <!-- Conteneur des slides -->
    <div class="carousel-track-container overflow-hidden px-12">
      <ul 
        x-ref="track" 
        class="carousel-track flex transition-transform duration-300" 
        :style="`transform: translateX(-${(current % itemCount) * (100 / slidesToShow)}%)`"
      >
        <slot />
      </ul>
    </div>
    
    <!-- Bouton Suivant -->
    <button 
      class="carousel-button next absolute top-1/2 -translate-y-1/2 right-0 z-10 bg-white rounded-full w-10 h-10 flex items-center justify-center shadow-md" 
      @click="current = (current + 1) % itemCount"
      aria-label="Suivant"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
    
    <!-- Indicateurs -->
    <div class="carousel-nav flex justify-center mt-4">
      <template x-for="i in Math.ceil(itemCount / slidesToShow)" :key="i">
        <button 
          class="carousel-indicator mx-1 w-3 h-3 rounded-full transition-all duration-300"
          :class="{ 'bg-pink-500 scale-125': Math.floor(current / slidesToShow) === i - 1, 'bg-gray-300': Math.floor(current / slidesToShow) !== i - 1 }"
          @click="current = (i - 1) * slidesToShow"
          :aria-label="`Aller à la page ${i}`"
        ></button>
      </template>
    </div>
  </div>
</div>

<style>
  .carousel-track {
    display: flex;
    transition: transform 0.5s ease;
  }
  
  .carousel-track > :global(li) {
    flex: 0 0 100%;
    padding: 0 0.5rem;
    box-sizing: border-box;
  }
  
  @media (min-width: 640px) {
    .carousel-track > :global(li) {
      flex: 0 0 50%;
    }
  }
  
  @media (min-width: 768px) {
    .carousel-track > :global(li) {
      flex: 0 0 33.333333%;
    }
  }
  
  @media (min-width: 1024px) {
    .carousel-track > :global(li) {
      flex: 0 0 25%;
    }
  }
</style>